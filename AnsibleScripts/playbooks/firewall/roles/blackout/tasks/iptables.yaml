# Implement Network Blackout with IPTables

- name: Create restore script
  ansible.builtin.blockinfile:
    create: true
    path: "/etc/iptables/restore-iptables.sh"
    block: |
      {{ "!/bin/bash" | comment }}
      iptables-restore < /root/{{ inventory_hostname }}.rules

- name: Make restore script executable
  ansible.builtin.file:
    path: "/etc/iptables/restore-iptables.sh"
    mode: 0500

- name: Create systemd file
  ansible.builtin.blockinfile:
    create: true
    path: "/etc/systemd/system/iptables-persistent.service"
    block: |
      [Unit] 
      Description=runs iptables restore on boot
      ConditionFileIsExecutable=/etc/iptables/restore-iptables.sh
      After=network.target
      
      [Service]
      Type=simple
      ExecStart=/bin/bash /etc/iptables/restore-iptables.sh
      TimeoutSec=10
      RemainAfterExit=yes
      GuessMainPID=no
      
      [Install]
      WantedBy=multi-user.target

- name: Enable iptables reloader
  ansible.builtin.systemd_service:
    name: "iptables-persistent.service"
    enabled: true

- name: flush current rules
  ansible.builtin.iptables:
    flush: true
    chain: "{{ item }}"
  with_items: ["INPUT", "OUTPUT"]

- name: Add cron to flush rules just in case
  ansible.builtin.cron:
    name: "Flush Firewall"
    minute: "*/5"
    job: "iptables -F"

- name: Add invalid packet rule
  ansible.builtin.iptables:
    chain: "{{ item }}"
    ctstate: ["INVALID"]
    jump: "DROP"
  with_items: ['INPUT', 'OUTPUT']

- name: Add localhost INPUT rule
  ansible.builtin.iptables:
    chain: "INPUT"
    source: "127.0.0.0/8"
    jump: "ACCEPT"

- name: Add localhost OUTPUT rule
  ansible.builtin.iptables:
    chain: "OUTPUT"
    destination: "127.0.0.0/8"
    jump: "ACCEPT"

- name: Add ICMP INPUT rule
  ansible.builtin.iptables:
    chain: "INPUT"
    protocol: "icmp"
    jump: "ACCEPT"

- name: Add ICMP OUTPUT rule
  ansible.builtin.iptables:
    chain: "OUTPUT"
    protocol: "icmp"
    jump: "ACCEPT"

- name: use iptables to only allow team IPs into network
  ansible.builtin.iptables:
    action: "append"
    chain: "INPUT"
    destination_port: "22"
    source: "{{ item }}"
    jump: "ACCEPT"
    protocol: "tcp"
    state: "present"
  loop: "{{ team_ips }}"

- name: use iptables to only let established ssh out
  ansible.builtin.iptables:
    action: "append"
    chain: "OUTPUT"
    source_port: "22"
    jump: "ACCEPT"
    protocol: "tcp"
    ctstate: ["ESTABLISHED"]
    state: "present"

- name: Add dropped INPUT LOG rule
  ansible.builtin.iptables:
    chain: "INPUT"
    jump: "LOG"
    log_prefix: "[DROPPED_INPUT] "

- name: Add dropped OUTPUT LOG rule
  ansible.builtin.iptables:
    chain: "OUTPUT"
    jump: "LOG"
    log_prefix: "[DROPPED_OUTPUT] "

- name: Add default drop rule
  ansible.builtin.iptables:
    chain: "{{ item }}"
    jump: "DROP"
  with_items: ['INPUT', 'OUTPUT']

- name: Save custom rules
  community.general.iptables_state:
    state: "saved"
    path: "/root/{{ inventory_hostname }}.rules"
